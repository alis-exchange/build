import{_ as e,o,c as n,a as t}from"./app.88e698c3.js";const s="/assets/conceptual-framework-resources.bb22db4b.png",g=JSON.parse('{"title":"Core Concepts","description":"","frontmatter":{"title":"Core Concepts"},"headers":[{"level":2,"title":"Organisation","slug":"organisation","link":"#organisation","children":[]},{"level":2,"title":"Product","slug":"product","link":"#product","children":[]},{"level":2,"title":"Protocol buffer","slug":"protocol-buffer","link":"#protocol-buffer","children":[]},{"level":2,"title":"Neuron","slug":"neuron","link":"#neuron","children":[]},{"level":2,"title":"Deployments","slug":"deployments","link":"#deployments","children":[{"level":3,"title":"Product deployment","slug":"product-deployment","link":"#product-deployment","children":[]},{"level":3,"title":"Neuron deployment","slug":"neuron-deployment","link":"#neuron-deployment","children":[]}]}],"relativePath":"guides/references/conceptual-framework.md"}'),a={name:"guides/references/conceptual-framework.md"},r=t('<h1 id="conceptual-framework" tabindex="-1">Conceptual framework <a class="header-anchor" href="#conceptual-framework" aria-hidden="true">#</a></h1><p>When making use of the three easy steps of <em>define</em>, <em>build</em> and <em>deploy</em>, Alis Build leverages a collection of resources to elegantly integrate the cloud technologies that make up the platform. These resources themselves were developed using the <em>define</em>, <em>build</em> and <em>deploy</em> steps.</p><p>The primary resources that are used by Alis Build are:</p><ul><li>Organisations;</li><li>Products;</li><li>Protocol Buffers;</li><li>Neurons; and</li><li>Deployments</li></ul><p>The relationships between these resources are depicted below, and explained in more detail in the following sections.</p><p><img src="'+s+`" alt=""></p><h2 id="organisation" tabindex="-1">Organisation <a class="header-anchor" href="#organisation" aria-hidden="true">#</a></h2><p>An <code>organisation</code> represents the top-level resource on the platform.</p><ul><li><em>Conceptually</em>, all <code>products</code> built on the platform belong to a specific <code>organisation</code>.</li><li><em>Practically</em>, an <code>organisation</code>: <ul><li>Is responsible for billing.</li><li>Owns and manages users in the organisation along with access management.</li><li>Has a monorepo in which all resource and service definitions as well as infrastructure specification is contained.</li></ul></li></ul><h2 id="product" tabindex="-1">Product <a class="header-anchor" href="#product" aria-hidden="true">#</a></h2><p>A <code>product</code> resource represents a digital product built on the platform. The majority of these adopt an <a href="https://swagger.io/resources/articles/adopting-an-api-first-approach/" target="_blank" rel="noreferrer">API-first strategy</a>.</p><ul><li><em>Conceptually</em>, a <code>product</code> is the thing which is offered to the world, whether for usage within an <code>organisation</code> or as a B2B/B2C product.</li><li><em>Practically</em>, the <code>product</code>: <ul><li>Has its own Google Cloud project.</li><li>Has a repo in which the source code for the <code>product</code> is contained.</li><li>Consists of a group of developers.</li><li>Can have one or more deployments of the <code>product</code>.</li><li>Manages access to the deployments of the <code>product</code>. This may be on an individual or group level.</li><li>Will specify the various APIs and infrastructure required by the children <code>neurons</code> through using <a href="https://www.terraform.io/docs" target="_blank" rel="noreferrer">Terraform</a>.</li></ul></li></ul><p>Example <code>products</code> built by <a href="https://alpha.alisx.com/products" target="_blank" rel="noreferrer">Alis Alpha OS</a> include:</p><ul><li><code>DE</code>: <em>Data Engineering</em>, responsible for synchronising data from external sources.</li><li><code>CP</code>: <em>Compliance</em>, a fast and flexible framework for accurate portfolio compliance at scale.</li></ul><p>Furthermore, the Alis Build platform delivers its value by leveraging other products such as <code>OS</code>, the <em>operating system</em> facilitating the management of all the resources on the platform; and <code>CL</code>, the <em>command-line interface</em> which provides a means to interact with <code>OS</code> from your terminal.</p><h2 id="protocol-buffer" tabindex="-1">Protocol buffer <a class="header-anchor" href="#protocol-buffer" aria-hidden="true">#</a></h2><p>Everything in our worlds starts with a <code>protocol buffer</code>, also referred to as a <em>proto</em>. This resource leverages the original Protocol Buffers design by Sanjay Ghemawat, Jeff Dean, and others (see <a href="/guides/references/core-technologies.html#protocol-buffers">Protocol buffers</a> in our <em>further reading</em>).</p><p>The proto is used to clearly define all the functionality and data structures of the services you want to build out. You therefore own your definitions and workflows, whether it is in building out in-house services our integrating with third-party products.</p><p>This definition first approach forms the foundation of ensuring the consistency and simplicity across the entire Alis ecosystem. It is further leveraged by our platform to offer a range of features, including:</p><ul><li>Auto-generating internal and client facing client libraries for a range of supported languages (currently Go, Python and JavaScript). This allows for easy implementation of the methods and allows clients to easily consume your services in their own development environment.</li><li>Autoconfiguring API gateways for the services specified in the protos. This provides HTTP endpoints for the gRPC methods, allowing for traditional REST calls to be made to the endpoints.</li><li><a href="./../how-to-guides/auto-generated-docs.html">Auto-generating documentation</a> for your product directly from your proto definitions.</li></ul><details class="details custom-block"><summary>Everything is a proto</summary><p>Everything in our world has a definition in a proto, including the resources discussed in this section!</p><p>Below are examples of the Alis Build resource definitions.</p><div class="language-protobuf"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre><code><span class="token comment">// A Organisation resource represents the</span>
<span class="token comment">// top-level resource reflecting an organisation</span>
<span class="token keyword">message</span> <span class="token class-name">Organisation</span> <span class="token punctuation">{</span>
  <span class="token comment">// The Organisation resource name</span>
  <span class="token comment">// Format: organisations/{organisation}</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment">// Display name</span>
  <span class="token builtin">string</span> display_name <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// A Product resource represents a product on</span>
<span class="token comment">// the Alis Build platform.</span>
<span class="token keyword">message</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
  <span class="token comment">// Product resource name</span>
  <span class="token comment">// Format: organisations/{organisation}/products/{product}</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment">// Display name</span>
  <span class="token builtin">string</span> display_name <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// A Protocol Buffer resource.</span>
<span class="token comment">//</span>
<span class="token comment">// In the beginning there was a Proto. And the Proto was good.</span>
<span class="token comment">// Everything in our worlds starts with a Proto. Based on original Protocol Buffers design</span>
<span class="token comment">// by Sanjay Ghemawat, Jeff Dean, and others.</span>
<span class="token keyword">message</span> <span class="token class-name">ProtocolBuffer</span> <span class="token punctuation">{</span>
  <span class="token comment">// The ProtoPackage resource name</span>
  <span class="token comment">// The resourceID refers to the &#39;package&#39; defined in the .proto file.</span>
  <span class="token comment">// Format: protocolBuffers/{resourceID}</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment">// State of the ProtocolBuffer.</span>
  <span class="token positional-class-name class-name">State</span> state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token comment">// The ProtocolBuffer State options</span>
  <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    <span class="token comment">// User did not specify state</span>
    STATE_UNSPECIFIED <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// Active state</span>
    ACTIVE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// Failed</span>
    FAILED <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre></div></details><h2 id="neuron" tabindex="-1">Neuron <a class="header-anchor" href="#neuron" aria-hidden="true">#</a></h2><p>A <code>neuron</code> resource represents the <em>unit of compute</em>, i.e. the infrastructure and code that executes the logic, used by the parent <code>product</code>. Each <code>neuron</code> is either a <em>resource</em> type or a <em>service</em> type. The collection of <code>neurons</code> in a <code>product</code> - i.e. the resources, <a href="https://cloud.google.com/apis/design/standard_methods#:~:text=This%20chapter%20defines%20the%20concept%20of%20standard%20methods%2C%20which%20are%20List%2C%20Get%2C%20Create%2C%20Update%2C%20and%20Delete" target="_blank"> methods on the resources</a> and the services (typically following <a href="https://cloud.google.com/apis/design/custom_methods" target="_blank"> custom methods</a>) - provide all the functionality that a <code>product</code> requires to provide its offering.</p><div class="info custom-block"><p class="custom-block-title"><strong>Interesting Fact</strong></p><p>The word <strong>neuron</strong> was inspired by the neurons which exist in our brain. Like the billions of neurons in our brain, which all work independently in this complex network to achieve a single goal, the alis neurons all work together independently in a network of microservices to achieve the goal of their product and organisation.</p></div><h2 id="deployments" tabindex="-1">Deployments <a class="header-anchor" href="#deployments" aria-hidden="true">#</a></h2><p>A <em>deployment</em> refers to an operational instance of a <code>product</code> on the cloud which clients would interact with. Under the hood this consists of both <code>product deployments</code> and <code>neuron deployments</code>.</p><h3 id="product-deployment" tabindex="-1">Product deployment <a class="header-anchor" href="#product-deployment" aria-hidden="true">#</a></h3><p>A <code>product deployment</code> refers to the hardware infrastructure aspect of the product. As explained in the <a href="/guides/references/conceptual-framework.html#product">product section</a>, the organisation&#39;s <code>proto</code> repository contains a directory for each product, in which the infrastructure requirements used within the neurons are specified.</p><p>Before <em>deploying</em> a <code>product</code>, it first needs to be <em>built</em> (see <code>alis build {org}.{product}</code>), which increments the semantic versioning and applies the <strong>product level</strong> (i.e. not those within the <code>neurons</code>) Terraform specification within the <code>product</code> Google Cloud project.</p><p>When a <code>product</code> is <em>deployed</em> (see <code>alis deploy {org}.{product}</code>), the <strong>product level</strong> (i.e. not those within the <code>neurons</code>) Terraform files are used to apply the infrastructure specification, the end <code>product</code> being the deployment environment reflecting the specification in the <code>*.tf</code> files. Once deployed, each <code>product deployment</code> has its own <em>Google Cloud project</em>.</p><h3 id="neuron-deployment" tabindex="-1">Neuron deployment <a class="header-anchor" href="#neuron-deployment" aria-hidden="true">#</a></h3><p>A <code>neuron deployment</code> refers to a specific version of a <code>neuron</code> that is operational within a specific <code>product deployment</code>, thereby being a <em>child resource</em> of a <code>product deployment</code>.</p><p>Before <em>deploying</em> a <code>neuron</code>, it first needs to be <em>built</em> (see <code>alis build {org}.{product}.{neuron}</code>). During the build process, the semantic versioning is incremented and deployment package is created from the source code and the Terraform specification:</p><ol><li>The hash of the latest commit is captured such as to have a snapshot of the Terraform specification at the point in time the <code>build</code> was called.</li><li>The Dockerfile(s) in the <code>neuron</code> repo is executed on <em><a href="https://cloud.google.com/build" target="_blank" rel="noreferrer">Cloud Build</a></em> to build the images from the <code>neuron</code> source code, which is stored in the <em><a href="https://cloud.google.com/artifact-registry" target="_blank" rel="noreferrer">Artifact Registry</a></em>.</li></ol><p>When the <code>neuron</code> is <em>deployed</em> to a specific <code>product deployment</code> (see <code>alis deploy {org}.{product}.{neuron}</code>), the <code>neuron</code> level Terraform specification is applied in the <em>Google Cloud project</em> of the respective <code>product deployment</code>. This specification will typically contain services which point to the image in the artifact registry that was built when running <code>alis build {org}.{product}.{neuron}</code>.</p><p>A <code>product deployment</code> may consist of all the <code>neurons</code> within a <code>product</code> or a subset thereof.</p>`,36),i=[r];function c(l,p,d,u,h,m){return o(),n("div",null,i)}const k=e(a,[["render",c]]);export{g as __pageData,k as default};
