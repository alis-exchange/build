import{_ as e,o,c as n,a as t}from"./app.c617c4d2.js";const f=JSON.parse('{"title":"Core Concepts","description":"","frontmatter":{"title":"Core Concepts"},"headers":[{"level":2,"title":"Organisation","slug":"organisation","link":"#organisation","children":[]},{"level":2,"title":"Product","slug":"product","link":"#product","children":[]},{"level":2,"title":"Protocol buffer","slug":"protocol-buffer","link":"#protocol-buffer","children":[]},{"level":2,"title":"Neuron","slug":"neuron","link":"#neuron","children":[]},{"level":2,"title":"Deployments","slug":"deployments","link":"#deployments","children":[{"level":3,"title":"Product deployment","slug":"product-deployment","link":"#product-deployment","children":[]},{"level":3,"title":"Neuron deployment","slug":"neuron-deployment","link":"#neuron-deployment","children":[]}]},{"level":2,"title":"Common deployment patterns","slug":"common-deployment-patterns","link":"#common-deployment-patterns","children":[{"level":3,"title":"Pattern 1: Full product deployment","slug":"pattern-1-full-product-deployment","link":"#pattern-1-full-product-deployment","children":[]},{"level":3,"title":"Pattern 2: Limited features product deployment","slug":"pattern-2-limited-features-product-deployment","link":"#pattern-2-limited-features-product-deployment","children":[]}]}],"relativePath":"guides/getting-started/conceptual-framework.md"}'),a={name:"guides/getting-started/conceptual-framework.md"},s=t(`<h1 id="conceptual-framework" tabindex="-1">Conceptual framework <a class="header-anchor" href="#conceptual-framework" aria-hidden="true">#</a></h1><p>The Alis Build platform leverages a collection of resources that follow the best practices of resource-oriented design. These resources are used to elegantly integrate the cloud technologies that make up the platform.</p><p>The three major resources can be communicated together as an <code>organisation</code> having one or more <code>product</code>, consisting of one or more <code>protocol buffer</code>, which is implemented in a <code>neuron</code>. Additionally, <code>products</code> have <code>deployments</code>, which consists of all, or a subset, of the <code>neurons</code>.</p><h2 id="organisation" tabindex="-1">Organisation <a class="header-anchor" href="#organisation" aria-hidden="true">#</a></h2><p>An <code>organisation</code> represents the top-level resource on the platform.</p><ul><li><em>Conceptually</em>, all <code>products</code> built on the platform belong to a specific <code>organisation</code>.</li><li><em>Practically</em>, an <code>organisation</code>: <ul><li>Is responsible for billing.</li><li>Owns and manages users in the organisation along with access management.</li><li>Has a monorepo in which all resource and service definitions as well as infrastructure specification is contained.</li></ul></li></ul><h2 id="product" tabindex="-1">Product <a class="header-anchor" href="#product" aria-hidden="true">#</a></h2><p>A <code>product</code> resource represents a digital product built on the platform. The majority of these adopt an <a href="https://swagger.io/resources/articles/adopting-an-api-first-approach/" target="_blank" rel="noreferrer">API-first strategy</a>.</p><ul><li><em>Conceptually</em>, a <code>product</code> is the thing which is offered to the world, whether for usage within an <code>organisation</code> or as a B2B/B2C product.</li><li><em>Practically</em>, the <code>product</code>: <ul><li>Has its own Google Cloud project.</li><li>Has a repo in which the source code for the <code>product</code> is contained.</li><li>Consists of a group of developers.</li><li>Can have one or more deployments of the <code>product</code>.</li><li>Manages access to the deployments of the <code>product</code>. This may be on an individual or group level.</li><li>Will specify the various APIs and infrastructure required by the children <code>neurons</code> through using <a href="https://www.terraform.io/docs" target="_blank" rel="noreferrer">Terraform</a>.</li></ul></li></ul><p>Example <code>products</code> built by <a href="https://alpha.alisx.com/products" target="_blank" rel="noreferrer">Alis Alpha OS</a> include:</p><ul><li><code>DE</code>: <em>Data Engineering</em>, responsible for synchronising data from external sources.</li><li><code>CP</code>: <em>Compliance</em>, a fast and flexible framework for accurate portfolio compliance at scale.</li></ul><p>Furthermore, the Alis Build platform delivers its value by leveraging other products such as <code>OS</code>, the <em>operating system</em> facilitating the management of all the resources on the platform; and <code>CL</code>, the <em>command-line interface</em> which provides a means to interact with <code>OS</code> from your terminal.</p><h2 id="protocol-buffer" tabindex="-1">Protocol buffer <a class="header-anchor" href="#protocol-buffer" aria-hidden="true">#</a></h2><p>Everything in our worlds starts with a <code>protocol buffer</code>, also referred to as a <em>proto</em>. This resource leverages the original Protocol Buffers design by Sanjay Ghemawat, Jeff Dean, and others (see <a href="/guides/references/core-technologies.html#protocol-buffers">Protocol buffers</a> in our <em>further reading</em>).</p><p>The proto is used to clearly define all the functionality and data structures of the services you want to build out. You therefore own your definitions and workflows, whether it is in building out in-house services our integrating with third-party products.</p><p>This definition first approach forms the foundation of ensuring the consistency and simplicity across the entire Alis ecosystem. It is further leveraged by our platform to offer a range of features, including:</p><ul><li>Auto-generating internal and client facing client libraries for a range of supported languages (currently Go, Python and JavaScript). This allows for easy implementation of the methods and allows clients to easily consume your services in their own development environment.</li><li>Autoconfiguring API gateways for the services specified in the protos. This provides HTTP endpoints for the gRPC methods, allowing for traditional REST calls to be made to the endpoints.</li><li><a href="./../how-to-guides/auto-generated-docs.html">Auto-generating documentation</a> for your product directly from your proto definitions.</li></ul><details class="details custom-block"><summary>Everything is a proto</summary><p>Everything in our world has a definition in a proto, including the resources discussed in this section!</p><p>Below are examples of the Alis Build resource definitions.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">// A Organisation resource represents the</span></span>
<span class="line"><span style="color:#A6ACCD;">// top-level resource reflecting an organisation</span></span>
<span class="line"><span style="color:#A6ACCD;">message Organisation {</span></span>
<span class="line"><span style="color:#A6ACCD;">  // The Organisation resource name</span></span>
<span class="line"><span style="color:#A6ACCD;">  // Format: organisations/{organisation}</span></span>
<span class="line"><span style="color:#A6ACCD;">  string name = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // Display name</span></span>
<span class="line"><span style="color:#A6ACCD;">  string display_name = 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">  ...</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// A Product resource represents a product on</span></span>
<span class="line"><span style="color:#A6ACCD;">// the Alis Build platform.</span></span>
<span class="line"><span style="color:#A6ACCD;">message Product {</span></span>
<span class="line"><span style="color:#A6ACCD;">  // Product resource name</span></span>
<span class="line"><span style="color:#A6ACCD;">  // Format: organisations/{organisation}/products/{product}</span></span>
<span class="line"><span style="color:#A6ACCD;">  string name = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // Display name</span></span>
<span class="line"><span style="color:#A6ACCD;">  string display_name = 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">  ...</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// A Protocol Buffer resource.</span></span>
<span class="line"><span style="color:#A6ACCD;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">// In the beginning there was a Proto. And the Proto was good.</span></span>
<span class="line"><span style="color:#A6ACCD;">// Everything in our worlds starts with a Proto. Based on original Protocol Buffers design</span></span>
<span class="line"><span style="color:#A6ACCD;">// by Sanjay Ghemawat, Jeff Dean, and others.</span></span>
<span class="line"><span style="color:#A6ACCD;">message ProtocolBuffer {</span></span>
<span class="line"><span style="color:#A6ACCD;">  // The ProtoPackage resource name</span></span>
<span class="line"><span style="color:#A6ACCD;">  // The resourceID refers to the &#39;package&#39; defined in the .proto file.</span></span>
<span class="line"><span style="color:#A6ACCD;">  // Format: protocolBuffers/{resourceID}</span></span>
<span class="line"><span style="color:#A6ACCD;">  string name = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // State of the ProtocolBuffer.</span></span>
<span class="line"><span style="color:#A6ACCD;">  State state = 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // The ProtocolBuffer State options</span></span>
<span class="line"><span style="color:#A6ACCD;">  enum State {</span></span>
<span class="line"><span style="color:#A6ACCD;">    // User did not specify state</span></span>
<span class="line"><span style="color:#A6ACCD;">    STATE_UNSPECIFIED = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">    // Active state</span></span>
<span class="line"><span style="color:#A6ACCD;">    ACTIVE = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">    // Failed</span></span>
<span class="line"><span style="color:#A6ACCD;">    FAILED = 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">  ...</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></details><h2 id="neuron" tabindex="-1">Neuron <a class="header-anchor" href="#neuron" aria-hidden="true">#</a></h2><p>A <code>neuron</code> resource represents the <em>unit of compute</em>, i.e. the infrastructure and code that executes the logic, used by the parent <code>product</code>. Each <code>neuron</code> is either a <em>resource</em> type or a <em>service</em> type. The collection of <code>neurons</code> in a <code>product</code> - i.e. the resources, <a href="https://cloud.google.com/apis/design/standard_methods#:~:text=This%20chapter%20defines%20the%20concept%20of%20standard%20methods%2C%20which%20are%20List%2C%20Get%2C%20Create%2C%20Update%2C%20and%20Delete" target="_blank"> methods on the resources</a> and the services (typically following <a href="https://cloud.google.com/apis/design/custom_methods" target="_blank"> custom methods</a>) - provide all the functionality that a <code>product</code> requires to provide its offering.</p><div class="info custom-block"><p class="custom-block-title"><strong>Interesting Fact</strong></p><p>The word <strong>neuron</strong> was inspired by the neurons which exist in our brain. Like the billions of neurons in our brain, which all work independently in this complex network to achieve a single goal, the alis neurons all work together independently in a network of microservices to achieve the goal of their product and organisation.</p></div><h2 id="deployments" tabindex="-1">Deployments <a class="header-anchor" href="#deployments" aria-hidden="true">#</a></h2><p>A <em>deployment</em> refers to an operational instance of a <code>product</code> on the cloud which clients would interact with. Under the hood this consists of both <code>product deployments</code> and <code>neuron deployments</code>.</p><h3 id="product-deployment" tabindex="-1">Product deployment <a class="header-anchor" href="#product-deployment" aria-hidden="true">#</a></h3><p>A <code>product deployment</code> refers to the hardware infrastructure aspect of the product. As explained in the <a href="/guides/getting-started/conceptual-framework.html#product">product section</a>, the organisation&#39;s <code>proto</code> repository contains a directory for each product, in which the infrastructure requirements used within the neurons are specified.</p><p>Before <em>deploying</em> a <code>product</code>, it first needs to be <em>released</em> (see <code>alis product release -h</code>), which increments the semantic versioning and applies the <strong>product level</strong> (i.e. not those within the <code>neurons</code>) Terraform specification within the <code>product</code> Google Cloud project.</p><p>When a <code>product</code> is <em>deployed</em> (see <code>alis product deploy -h</code>), the <strong>product level</strong> (i.e. not those within the <code>neurons</code>) Terraform files are used to apply the infrastructure specification, the end <code>product</code> being the deployment environment reflecting the specification in the <code>*.tf</code> files. Once deployed, each <code>product deployment</code> has its own <em>Google Cloud project</em>.</p><h3 id="neuron-deployment" tabindex="-1">Neuron deployment <a class="header-anchor" href="#neuron-deployment" aria-hidden="true">#</a></h3><p>A <code>neuron deployment</code> refers to a specific version of a <code>neuron</code> that is operational within a specific <code>product deployment</code>, thereby being a <em>child resource</em> of a <code>product deployment</code>.</p><p>Before <em>deploying</em> a <code>neuron</code>, it first needs to be <em>released</em> (see <code>alis neuron release -h</code>). During the build process, the semantic versioning is incremented and deployment package is created from the source code and the Terraform specification:</p><ol><li>The hash of the latest commit is captured such as to have a snapshot of the Terraform specification at the point in time the <code>build</code> was called.</li><li>The Dockerfile(s) in the <code>neuron</code> repo is executed on <em><a href="https://cloud.google.com/build" target="_blank" rel="noreferrer">Cloud Build</a></em> to build the images from the <code>neuron</code> source code, which is stored in the <em><a href="https://cloud.google.com/artifact-registry" target="_blank" rel="noreferrer">Artifact Registry</a></em>.</li></ol><p>When the <code>neuron</code> is <em>deployed</em> to a specific <code>product deployment</code> (see <code>alis neuron deploy -h</code>), the <code>neuron</code> level Terraform specification is applied in the <em>Google Cloud project</em> of the respective <code>product deployment</code>. This specification will typically contain services which point to the image in the artifact registry that was built when running <code>alis neuron build ...</code>.</p><p>A <code>product deployment</code> may consist of all the <code>neurons</code> within a <code>product</code> or a subset thereof. Common patterns have emerged from builders on the Alis Build platform which are discussed in the following section.</p><h2 id="common-deployment-patterns" tabindex="-1">Common deployment patterns <a class="header-anchor" href="#common-deployment-patterns" aria-hidden="true">#</a></h2><p>To demonstrate the three most typical deployment patterns, consider the example, depicted in the image, of a <code>product</code> consisting of three <code>neurons</code>.</p><div class="warning custom-block"><p class="custom-block-title"><strong>We do apologise</strong></p><p>We are busy updating our diagrams and have temporarily removed this image.</p></div><h3 id="pattern-1-full-product-deployment" tabindex="-1">Pattern 1: Full product deployment <a class="header-anchor" href="#pattern-1-full-product-deployment" aria-hidden="true">#</a></h3><p>The first pattern is where a <code>product</code> is deployed having all the <code>neurons</code>. This is typically used where a <code>product</code> provided to clients is required to have all the functionality across all the <code>neurons</code> and be independent of other <code>neuron deployments</code>.</p><div class="warning custom-block"><p class="custom-block-title"><strong>We do apologise</strong></p><p>We are busy updating our diagrams and have temporarily removed this image.</p></div><h3 id="pattern-2-limited-features-product-deployment" tabindex="-1">Pattern 2: Limited features product deployment <a class="header-anchor" href="#pattern-2-limited-features-product-deployment" aria-hidden="true">#</a></h3><p>The second pattern is where a <code>product</code> is deployed having a subset of <code>neurons</code>. This is typically used where a <code>product</code> may have a range of features that may individually be purchased by clients and therefore want to limit those available in a given <code>product deployment</code>.</p><p>The image depicts an example where two clients have access to two different <code>product deployments</code>. The <code>product</code> having the core functionality as part of <code>Neuron 1</code> and additional features being available with the other <code>neurons</code>. In the first case, the client would have the functionality provided by the core <code>Neuron 1</code> and the extended functionality of <code>Neuron 2</code>. In the second case, the client would have the functionality provided by the core <code>Neuron 1</code> and the extended functionality of <code>Neuron 3</code>.</p><div class="warning custom-block"><p class="custom-block-title"><strong>We do apologise</strong></p><p>We are busy updating our diagrams and have temporarily removed this image.</p></div>`,43),r=[s];function i(l,c,d,p,h,u){return o(),n("div",null,r)}const g=e(a,[["render",i]]);export{f as __pageData,g as default};
