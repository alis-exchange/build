import{_ as e,o as t,c as o,a as r}from"./app.a516543e.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"archive/local-folder-structure.md"}'),c={name:"archive/local-folder-structure.md"},s=r('<blockquote><p><code>/api</code> [<em>Currently unused</em>] <br><code>/product</code> [<em>This will only be created once you <code>get</code> or <code>create</code> a product</em>] - This contains multiple directories, one for each <code>product</code>. These individual <code>product</code> directories is a git repo where the source code for a <code>product</code> lives. <br><code>/proto</code> - This directory contains all the product definitions, both the <code>*.proto</code> files - which contain the service definitions - and the various <code>*.tf</code> files - which define the infrastructure requirements at both a <code>product</code> and <code>neuron</code> level. A git repo sits at this level.<br><code>/protobuf</code> - Contains the <em>server skeleton</em> which and <em>client stub</em> for the protos in the various languages available. The <em>server skeleton</em> is used for the implementation of the <a href="https://grpc.io/docs/what-is-grpc/core-concepts/#:~:text=On%20the%20server%20side%2C%20the%20server%20implements%20the%20methods%20declared%20by%20the%20service%20and%20runs%20a%20gRPC%20server%20to%20handle%20client%20calls.%20The%20gRPC%20infrastructure%20decodes%20incoming%20requests%2C%20executes%20service%20methods%2C%20and%20encodes%20service%20responses." target="_blank"> server</a>. The <em>client stub</em> is used on the <a href="https://grpc.io/docs/what-is-grpc/core-concepts/#:~:text=On%20the%20client%20side%2C%20the,server%E2%80%99s%20protocol%20buffer%20response(s)." target="_blank"> client side</a> to programmatically call the APIs.<br></p></blockquote>',1),i=[s];function d(a,n,l,h,u,p){return t(),o("div",null,i)}const f=e(c,[["render",d]]);export{_ as __pageData,f as default};
