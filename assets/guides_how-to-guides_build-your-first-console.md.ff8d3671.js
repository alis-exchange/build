import{_ as n,o as s,c as a,a as t}from"./app.a788c755.js";const e="/assets/build-your-first-console-pattern-concept.da43219d.png",o="/assets/build-your-first-console-alis-console.aee0a62e.png",p="/assets/build-your-first-console-final-result.40813165.gif",f=JSON.parse('{"title":"Build your first console","description":"","frontmatter":{"title":"Build your first console"},"headers":[{"level":2,"title":"Prerequisites","slug":"prerequisites","link":"#prerequisites","children":[]},{"level":2,"title":"Resource Service","slug":"resource-service","link":"#resource-service","children":[]},{"level":2,"title":"Console Service","slug":"console-service","link":"#console-service","children":[]},{"level":2,"title":"Consuming services on the frontend","slug":"consuming-services-on-the-frontend","link":"#consuming-services-on-the-frontend","children":[]}],"relativePath":"guides/how-to-guides/build-your-first-console.md"}'),c={name:"guides/how-to-guides/build-your-first-console.md"},l=t('<h1 id="build-your-first-console" tabindex="-1">Build your first console <a class="header-anchor" href="#build-your-first-console" aria-hidden="true">#</a></h1><p>This how-to-guide will take you through the steps of defining a resource service all the way through to consuming the service on a frontend application.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a></h2><p>To get started with this guide, there are a few things you need to have done as an Alis Builder:</p><ol><li>Ensure you have installed and set up the <a href="./../getting-started/command-line-interface.html">Alis CLI</a></li><li>Ensure you have <a href="./../getting-started/conceptual-framework.html">created a product on the Alis Build platform</a></li><li>Ensure you have been added to the relevant organisation&#39;s developers group. Request to be added by the owner of the organisation.</li></ol><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You can list all available organisations and their owners by running <code>alis org list</code></p></div><h1 id="conceptual-overview" tabindex="-1">Conceptual Overview <a class="header-anchor" href="#conceptual-overview" aria-hidden="true">#</a></h1><p>A console in the Alis Build ecosystem is a web application which leverages a backend-for-frontend pattern to provide the means to consume multiple products within one interface. Since consoles follow a resource oriented design principals, similar to a Alis Build product, it ensures end-to-end type safety with type definitions flowing through from the backend to the frontend. The conceptual overview of the pattern is depicted in the image below.</p><div><img src="'+e+`" style=""></div><p>A resource server is responsible for all resource management services. A console server is responsible for managing communication with all resources servers as well as hosting the frontend application. Communication between resource and console servers take place through gRPC and the console server and the frontend application utilises gRPC-web for communication.</p><h2 id="resource-service" tabindex="-1">Resource Service <a class="header-anchor" href="#resource-service" aria-hidden="true">#</a></h2><p>For our resource service we will define a service <code>CalcService</code> with a <code>ResourceMethodSumCalculation</code> method, which takes in a request <code>SumRequest</code> and returns a response <code>SumResponse</code>. The <code>SumRequest</code> will have two arguments of which the <code>ResourceMethodSumCalculation</code> will calculate the sum and return the answer in the <code>SumResponse</code>.</p><p>First we create a new proto through the Alis Build CLI. From your terminal, run the <code>alis proto create</code> command with your organisation and product&#39;s name. This guide uses the <code>play</code> organisation and the <code>me</code> product.</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code>alis proto create alis.play.me.services-calculate-v1
</code></pre></div><p>This will create a new proto with a set of terraform files to specify the cloud infrastructure used to make the service available. The proto definition for our <code>ResourceMethodSumCalculation</code> with the corresponding <code>SumRequest</code> and <code>Sumresponse</code> are:</p><div class="language-protobuf"><button class="copy"></button><span class="lang">protobuf</span><pre><code><span class="token comment">// Calculation service</span>
<span class="token keyword">service</span> <span class="token class-name">CalcService</span> <span class="token punctuation">{</span>
  <span class="token comment">// Calculate the sum of two numbers</span>
  <span class="token keyword">rpc</span> <span class="token function">ResourceMethodSumCalculation</span> <span class="token punctuation">(</span><span class="token class-name">SumRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">SumResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">option</span> <span class="token punctuation">(</span>google<span class="token punctuation">.</span>api<span class="token punctuation">.</span>http<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      post<span class="token punctuation">:</span> <span class="token string">&quot;/services/calculate/v1:resourceMethodSumCalculation&quot;</span><span class="token punctuation">;</span>
      body<span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// SumRequest definition</span>
<span class="token keyword">message</span> <span class="token class-name">SumRequest</span> <span class="token punctuation">{</span>
  <span class="token comment">// The first value to sum</span>
  <span class="token builtin">float</span> value_one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment">// The second value to sum</span>
  <span class="token builtin">float</span> value_two <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// SumResponse definition</span>
<span class="token keyword">message</span> <span class="token class-name">SumResponse</span> <span class="token punctuation">{</span>
  <span class="token comment">// Sum of the two values</span>
  <span class="token builtin">float</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre></div><p>We release the newly defined resource service through the Alis Build CLI to generate the necessary protobufs required to implement and consume the service.</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code>alis proto release alis.play.services-calculate-v1
</code></pre></div><p>Implementing the service requires a unit of compute, or know in Alis Build ecosystem as a neuron. To create a new neuron we run the following command in the terminal:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code>alis neuron create alis.play.services-calculate-v1
</code></pre></div><p>This creates a set of terraform files to implement according to the neuron&#39;s requirements.</p><p>With the protobufs published we can implement the method in the language of our choice. In this guide we implemented the methods in Go.</p><div class="language-go"><button class="copy"></button><span class="lang">go</span><pre><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>
	pb <span class="token string">&quot;go.protobuf.playground.exchange/play/me/services/calculate/v1&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// Create a Service object which we&#39;ll register with the Server</span>
<span class="token keyword">type</span> myService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	pb<span class="token punctuation">.</span>UnimplementedCalcServiceServer
<span class="token punctuation">}</span>

<span class="token comment">// ResourceMethodSumCalculation method is the implementation of the ResourceMethodSumCalculation method in the CalcService service.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>myService<span class="token punctuation">)</span> <span class="token function">ResourceMethodSumCalculation</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>pb<span class="token punctuation">.</span>SumRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>pb<span class="token punctuation">.</span>SumResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	
	<span class="token comment">// Calculate the sum of the two argument values in the request</span>
	sum <span class="token operator">:=</span> req<span class="token punctuation">.</span>ValueOne <span class="token operator">+</span> req<span class="token punctuation">.</span>ValueTwo
    
	<span class="token comment">// Initialise the response with the calculated sum</span>
	res <span class="token operator">:=</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>SumResponse<span class="token punctuation">{</span>Sum<span class="token punctuation">:</span> sum<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The imported protobufs provide all the types defined in the proto for the request, response and methods. Most IDEs allow you to explore these by hovering over the client and method names.</p><p>With the service implemented all that is left to do is to release and deploy the neuron through the Alis Build CLI. Run the following set of commands from your terminal:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code>alis neuron release alis.play.services-calculate-v1
</code></pre></div><p>When deploying the service a set of environmental variables are defined, which are used in the management of the underlying cloud infrastructure. In the neuron&#39;s <code>cloudrun.tf</code> file found in the organisations proto repo, specify a new <code>env</code> in the <code>containers</code> specifications.</p><div class="language-terraform"><button class="copy"></button><span class="lang">terraform</span><pre><code>spec{
  containers{
    ...
    env {
      name = &quot;ALIS_OS_HASH&quot;
      value = var.ALIS_OS_HASH
    }
  }
}
</code></pre></div><p>Define the variable in the <code>variables.tf</code> file as follows:</p><div class="language-terraform"><button class="copy"></button><span class="lang">terraform</span><pre><code>variable &quot;ALIS_OS_HASH&quot; {}
</code></pre></div><p>These variables are populated by the Alis Build platform when deploying the neuron. We are now ready to deploy the resource service.</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code>alis neuron deploy alis.play.services-calculate-v1
</code></pre></div><div class="info custom-block"><p class="custom-block-title">Setting the <code>ALIS_OS_HASH</code> environment variable</p><p>If this is the first time the neuron is deployed you will be promoted to create a new neuron deployment. Follow the steps outlined in the Alis Build CLI. When asked to create a new ENV, add the <code>ALIS_OS_HASH</code> as a new variable with <code>TBC</code> as the value, for the purposes of completing this guide. You can re-deploy the neuron at a later stage through the CLI with the flag <code>-e</code> where you can reset the variable&#39;s value to the correct cloud run hash.</p></div><p>The resource service is now ready to be consumed.</p><h2 id="console-service" tabindex="-1">Console Service <a class="header-anchor" href="#console-service" aria-hidden="true">#</a></h2><p>Designing and implementing a console service follows the same flow as designing and implementing a resource service. We create a new console proto for the <code>me</code> product in the <code>play</code> organisation with the following Alis Build CLI command:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code>alis proto create alis.play.services-console-v1
</code></pre></div><p>We define a service in the console proto called <code>CalculationService</code> with a <code>SumCalculation</code> method which takes a <code>SumRequest</code> and <code>SumResponse</code>. We define the <code>SumRequest</code> and <code>SumResponse</code> to match the resource service&#39;s <code>SumRequest</code> and <code>SumResponse</code>. However, the purpose of a console service is to gather the data from all the resource services, either a single resource service or multiple and collate the data in the format the frontend requires. For this reason the console service is seen as the backend-for-frontend layer. The request and response of the console service can therefore have a custom definition. The completed <code>SumCalculation</code> method definition would be:</p><div class="language-protobuf"><button class="copy"></button><span class="lang">protobuf</span><pre><code><span class="token comment">// Calculation service</span>
<span class="token keyword">service</span> <span class="token class-name">CalculationService</span> <span class="token punctuation">{</span>
  <span class="token comment">// Calculate the sum of two numbers with the consumption </span>
  <span class="token comment">// of the CalcService resource service</span>
  <span class="token keyword">rpc</span> <span class="token function">SumCalculation</span> <span class="token punctuation">(</span><span class="token class-name">SumRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">SumResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">option</span> <span class="token punctuation">(</span>google<span class="token punctuation">.</span>api<span class="token punctuation">.</span>http<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      post<span class="token punctuation">:</span> <span class="token string">&quot;/services/console/v1:sumCalculation&quot;</span><span class="token punctuation">;</span>
      body<span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// SumRequest definition</span>
<span class="token keyword">message</span> <span class="token class-name">SumRequest</span> <span class="token punctuation">{</span>
  <span class="token comment">// The first value to sum</span>
  <span class="token builtin">float</span> value_one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment">// The second value to sum</span>
  <span class="token builtin">float</span> value_two <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// SumResponse definition</span>
<span class="token keyword">message</span> <span class="token class-name">SumResponse</span> <span class="token punctuation">{</span>
  <span class="token comment">// Sum of the two values</span>
  <span class="token builtin">float</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre></div><p>Running the following command publishes the necessary protobufs required to implement the service.</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code>alis proto release alis.play.me.services-console-v1
</code></pre></div><p>To implement the console service we require a console server, i.e a console neuron. As mentioned the console server is responsible for handling all communication to all resource servers as well as hosting the frontend application.</p><p>With the help of the Alis Build CLI a console neuron can be pre-populated with boilerplate Vue 3 code. The application is pre-installed with <a href="https://vitejs.dev/" target="_blank" rel="noreferrer">Vite</a>, <a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">Typescript</a>, <a href="https://next.vuetifyjs.com/en/" target="_blank" rel="noreferrer">Vuetify 3</a>, <a href="https://pinia.vuejs.org/" target="_blank" rel="noreferrer">Pinia</a> (the official Vue state management package) and <a href="https://router.vuejs.org/" target="_blank" rel="noreferrer">Vue Router</a>. The boilerplate application code could be generated when a new neuron is created or with the <code>alis gen code</code> command with the <code>--console</code> flag for an existing neuron.</p><p>Create a new console neuron with:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code>alis neuron create alis.play.services-console-v1
</code></pre></div><div class="info custom-block"><p class="custom-block-title">Generate boilerplate application code with new neuron creation</p><p>When creating a new neuron, the Alis Build CLI will ask if boilerplate code should be generated. Type <code>y</code> if desired, followed by selecting the <code>console</code> option. For this guide we will use the <code>alis gen code</code> command with the <code>--console</code> flag in the following section.</p></div><p>Consuming a resource service requires the console neuron to establish a new client connection to the resource server. This is done in the <code>conn.go</code> and the <code>cliets.go</code> file in the <code>console/v1/internal</code> folder. The completed <code>clients.go</code> file for the <code>Calculate</code> resource service client should look something like this.</p><div class="language-go"><button class="copy"></button><span class="lang">go</span><pre><code>
<span class="token keyword">package</span> clients

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>
	pbPlay <span class="token string">&quot;go.protobuf.playground.exchange/play/me/services/calculate/v1&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	Calculate pbPlay<span class="token punctuation">.</span>CalculationServiceClient
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token comment">// Ensure that required envs exist.</span>
	<span class="token keyword">if</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">&quot;ALIS_OS_PROJECT&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;ALIS_OS_PROJECT env not set.&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">&quot;ALIS_OS_HASH&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;ALIS_OS_HASH env not set.&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Instantiate a client</span>
	<span class="token keyword">if</span> conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">NewConn</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token string">&quot;services-calculate-v1-&quot;</span><span class="token operator">+</span>os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">&quot;ALIS_OS_HASH&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;-ew.a.run.app:443&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		Calculate <span class="token operator">=</span> pbPlay<span class="token punctuation">.</span><span class="token function">NewCalculationServiceClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The <code>Calculate</code> resource service client is now available, allowing us to implement the <code>SumCalculation</code> console method. In the <code>methods.go</code> file create a method which makes a request to the <code>Calculate</code> resource service client&#39;s <code>ResourceMethodSumCalculation</code> method.</p><div class="language-go"><button class="copy"></button><span class="lang">go</span><pre><code>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>
	pb <span class="token string">&quot;go.protobuf.playground.exchange/play/me/services/console/v1&quot;</span>
	<span class="token string">&quot;google.golang.org/grpc/codes&quot;</span>
	<span class="token string">&quot;google.golang.org/grpc/status&quot;</span>
	<span class="token string">&quot;play.me.services.console.v1/internal/clients&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// Create a Service object which we&#39;ll register with the Server</span>
<span class="token keyword">type</span> myService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	pb<span class="token punctuation">.</span>UnimplementedCalculationServiceServer
<span class="token punctuation">}</span>

<span class="token comment">// SumCalculation method is the implementation of the SumCalculation method in the CalculationService service.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>myService<span class="token punctuation">)</span> <span class="token function">SumCalculation</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>pb<span class="token punctuation">.</span>SumRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>pb<span class="token punctuation">.</span>SumResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	
	CalcServiceReq <span class="token operator">:=</span> <span class="token operator">&amp;</span>pbPlay<span class="token punctuation">.</span>req<span class="token punctuation">{</span>
		ValueOne<span class="token punctuation">:</span> req<span class="token punctuation">.</span>value_one<span class="token punctuation">,</span>
		ValueTwo<span class="token punctuation">:</span> req<span class="token punctuation">.</span>value_two<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    
	<span class="token comment">// Make a request to the CalService in the Calculate resource client</span>
	sum<span class="token punctuation">,</span> err <span class="token operator">:=</span> clients<span class="token punctuation">.</span>Calculate<span class="token punctuation">.</span><span class="token function">ResourceMethodSumCalculation</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> CalcServiceReq<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> status<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>codes<span class="token punctuation">.</span>Internal<span class="token punctuation">,</span> <span class="token string">&quot;Error summing values: &quot;</span><span class="token operator">+</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Initialise the response with the calculated sum</span>
	res <span class="token operator">:=</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>SumResponse<span class="token punctuation">{</span>Sum<span class="token punctuation">:</span> sum<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

</code></pre></div><p>The console service is now ready to consumed by the frontend application.</p><h2 id="consuming-services-on-the-frontend" tabindex="-1">Consuming services on the frontend <a class="header-anchor" href="#consuming-services-on-the-frontend" aria-hidden="true">#</a></h2><p>With both the resource service and the console service implemented, we are now ready to consume the console service in the frontend application. To add a boilerplate frontend application to your existing console neuron, run the following gen code command in your terminal:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code>alis gen code alis.play.me.services-console-v1 <span class="token parameter variable">--console</span>
</code></pre></div><p>Importing the protobufs for both the resource services and console services, the application must be authenticated to the relevant organisation&#39;s artifact registry. This is achieved by adding a <code>.npmrc</code> file to the root folder of the application and adding the following code snippet with the variables <code>ORG_DOMAIN</code> and <code>ORG_PROJECT</code> populated accordingly.</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code>@<span class="token punctuation">{</span><span class="token constant">ORG_DOMAIN</span><span class="token punctuation">}</span><span class="token operator">:</span>registry<span class="token operator">=</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>europe<span class="token operator">-</span>west1<span class="token operator">-</span>npm<span class="token punctuation">.</span><span class="token property-access">pkg</span><span class="token punctuation">.</span><span class="token property-access">dev</span><span class="token operator">/</span><span class="token punctuation">{</span><span class="token constant">ORG_PROJECT</span><span class="token punctuation">}</span><span class="token operator">/</span>protobuf<span class="token operator">-</span>javascript<span class="token operator">/</span>europe<span class="token operator">-</span>west1<span class="token operator">-</span>npm<span class="token punctuation">.</span><span class="token property-access">pkg</span><span class="token punctuation">.</span><span class="token property-access">dev</span><span class="token operator">/</span><span class="token punctuation">{</span><span class="token constant">ORG_PROJECT</span><span class="token punctuation">}</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">protobuf-javascript</span><span class="token regex-delimiter">/</span></span><span class="token operator">:</span>always<span class="token operator">-</span>auth<span class="token operator">=</span><span class="token boolean">true</span>
</code></pre></div><p>For this guide the resulting code snippet would be:</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code>@alis<span class="token punctuation">.</span><span class="token property-access">services</span><span class="token operator">:</span>registry<span class="token operator">=</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>europe<span class="token operator">-</span>west1<span class="token operator">-</span>npm<span class="token punctuation">.</span><span class="token property-access">pkg</span><span class="token punctuation">.</span><span class="token property-access">dev</span><span class="token operator">/</span>alis<span class="token operator">-</span>org<span class="token operator">-</span><span class="token number">777777</span><span class="token operator">/</span>protobuf<span class="token operator">-</span>javascript<span class="token operator">/</span>europe<span class="token operator">-</span>west1<span class="token operator">-</span>npm<span class="token punctuation">.</span><span class="token property-access">pkg</span><span class="token punctuation">.</span><span class="token property-access">dev</span><span class="token operator">/</span>alis<span class="token operator">-</span>org<span class="token operator">-</span><span class="token number">777777</span><span class="token operator">/</span>protobuf<span class="token operator">-</span>javascript<span class="token operator">/</span><span class="token operator">:</span>always<span class="token operator">-</span>auth<span class="token operator">=</span><span class="token boolean">true</span>
</code></pre></div><p>To locally authenticate the application to the organisation&#39;s artifact registry run the following <code>npm</code> command:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="token function">npm</span> run auth_alis_local
</code></pre></div><p>After authentication and installing all required packages with <code>npm install</code>, start up a local server with <code>npm run dev</code>. You can view your new console in the browser at <code>localhost:8080</code>.</p><div><img src="`+o+`" style=""></div><p>To consume a service from your frontend, a console service client is required. We define a global console service client in the <code>index.ts</code> file in the <code>app/src/stores</code> folder.</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">ServicePromiseClient</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&quot;@alis.services/protobuf/play/me/services/console/v1/console_grpc_web_pb&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> srv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServicePromiseClient</span><span class="token punctuation">(</span><span class="token keyword module">import</span><span class="token punctuation">.</span><span class="token property-access">meta</span><span class="token punctuation">.</span><span class="token property-access">env</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">VITE_Base_URL</span></span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> srv<span class="token punctuation">;</span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">Environmental variables in the frontend</p><p>The environment variable for the <code>VITE_Base_URL</code> is set in a <em>.env</em> file in the root directory of your application. We have two environments in this guide, <code>dev</code> and <code>prod</code>. For more details on environment variables in Vite, read the official <a href="https://vitejs.dev/guide/env-and-mode.html" target="_blank" rel="noreferrer">Vite documentation</a>. The <em>.env</em> files for the respective environments are:</p><p><em>.env.development</em></p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code>VITE_ENV=Dev
VITE_Base_URL=http://localhost:8000
</code></pre></div><p><em>.env.production</em></p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code>VITE_ENV=Dev
VITE_Base_URL=
</code></pre></div></div><p>To consume the <code>CalculationService</code> service from the console service client we define a function which initialise a new <code>SumRequest</code> and <code>SumResponse</code>, and makes a request to the <code>SumCalculation</code> method. Using the protobuf helper methods we can initialise and set attributes for the defined message types.</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span><span class="token maybe-class-name">SumRequest</span><span class="token punctuation">,</span> <span class="token maybe-class-name">SumResponse</span><span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&quot;@playground.exchange/protobuf/play/me/services/console/v1/console_pb&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">valueOne</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">valueTwo</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>

            <span class="token keyword">let</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            req<span class="token punctuation">.</span><span class="token method function property-access">setValueOne</span><span class="token punctuation">(</span>valueOne<span class="token punctuation">)</span>
            req<span class="token punctuation">.</span><span class="token method function property-access">setValueTwo</span><span class="token punctuation">(</span>valueTwo<span class="token punctuation">)</span>

            answer <span class="token operator">=</span> <span class="token keyword control-flow">await</span> srv<span class="token punctuation">.</span><span class="token method function property-access">sumCalculation</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>

        <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token known-class-name class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre></div><p>Finally, a simple form component taking in two arguments and passing it to the <code>SumCalculation</code> method through the sum function.</p><div class="language-vue"><button class="copy"></button><span class="lang">vue</span><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-container</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-card</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>800<span class="token punctuation">&quot;</span></span> <span class="token attr-name">flat</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-card-text</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token unit">%</span></span><span class="token punctuation">&quot;</span></span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>d-flex justify-center align-center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-row</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-col</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>12<span class="token punctuation">&quot;</span></span> <span class="token attr-name">sm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>12<span class="token punctuation">&quot;</span></span> <span class="token attr-name">md</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>12<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>d-flex flex-row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-text-field</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mx-1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>valueOne<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Value One<span class="token punctuation">&quot;</span></span> <span class="token attr-name">variant</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>outlined<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-text-field</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-text-field</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mx-1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>valueTwo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Value Two<span class="token punctuation">&quot;</span></span> <span class="token attr-name">variant</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>outlined<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-text-field</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-btn</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mx-2 mt-1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>primary<span class="token punctuation">&quot;</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>large<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sum<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Sum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-btn</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-col</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-col</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>12<span class="token punctuation">&quot;</span></span> <span class="token attr-name">sm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>12<span class="token punctuation">&quot;</span></span> <span class="token attr-name">md</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>12<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Object.keys(answer).length &gt; 0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>d-flex flex-row justify-center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-card-title</span><span class="token punctuation">&gt;</span></span>
              Calculation Service Answer: {{ answer }}
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-card-title</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-col</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-row</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-card-text</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-card</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-container</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span>computed<span class="token punctuation">,</span> <span class="token maybe-class-name">Ref</span><span class="token punctuation">,</span> ref<span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&quot;vue&quot;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span>useSumStore<span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&quot;../stores/SumStore&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token maybe-class-name">SumStore</span> <span class="token operator">=</span> <span class="token function">useSumStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token literal-property property">valueOne</span><span class="token operator">:</span> <span class="token maybe-class-name">Ref</span><span class="token operator">&lt;</span>string <span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token literal-property property">valueTwo</span><span class="token operator">:</span> <span class="token maybe-class-name">Ref</span><span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token maybe-class-name">SumStore</span><span class="token punctuation">.</span><span class="token property-access">answer</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> numberOne <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>valueOne<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> numberTwo <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>valueTwo<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>

  <span class="token maybe-class-name">SumStore</span><span class="token punctuation">.</span><span class="token method function property-access">sum</span><span class="token punctuation">(</span>numberOne<span class="token punctuation">,</span> numberTwo<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>The resulting component can be seen below.</p><div><img src="`+p+'" style=""></div>',71),u=[l];function r(i,k,d,m,h,g){return s(),a("div",null,u)}const y=n(c,[["render",r]]);export{f as __pageData,y as default};
