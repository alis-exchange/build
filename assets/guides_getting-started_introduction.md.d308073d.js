import{_ as c,o as r,c as p,b as t,w as s,a as l,d as e,e as n,r as i}from"./app.a788c755.js";const u="/assets/introduction-proto-init.01402bf8.gif",d="/assets/introduction-proto-gen.4177ae40.gif",h="/assets/introduction-implementation-go.c8c56116.gif",m="/assets/introduction-consumption-go.e406f111.gif",g="/assets/introduction-test-server.7ea484df.gif",k="/assets/introduction-test-client.edc0055c.gif",f="/assets/introduction-proto-gen-types.a1693b67.gif",J=JSON.parse('{"title":"Alis Build Quickstart","description":"","frontmatter":{"title":"Alis Build Quickstart"},"headers":[{"level":2,"title":"Experience it yourself","slug":"experience-it-yourself","link":"#experience-it-yourself","children":[{"level":3,"title":"Before you start","slug":"before-you-start","link":"#before-you-start","children":[]}]},{"level":2,"title":"1. Define","slug":"_1-define","link":"#_1-define","children":[]},{"level":2,"title":"2. Implement","slug":"_2-implement","link":"#_2-implement","children":[]},{"level":2,"title":"3. Consume","slug":"_3-consume","link":"#_3-consume","children":[]},{"level":2,"title":"Test it out","slug":"test-it-out","link":"#test-it-out","children":[{"level":3,"title":"Start the server","slug":"start-the-server","link":"#start-the-server","children":[]},{"level":3,"title":"Consume the service","slug":"consume-the-service","link":"#consume-the-service","children":[]}]},{"level":2,"title":"Support for additional languages","slug":"support-for-additional-languages","link":"#support-for-additional-languages","children":[{"level":3,"title":"Test it out","slug":"test-it-out-1","link":"#test-it-out-1","children":[]}]},{"level":2,"title":"Want to see more?","slug":"want-to-see-more","link":"#want-to-see-more","children":[{"level":3,"title":"Design and implement digital services","slug":"design-and-implement-digital-services","link":"#design-and-implement-digital-services","children":[]},{"level":3,"title":"Consume digital services","slug":"consume-digital-services","link":"#consume-digital-services","children":[]},{"level":3,"title":"Configure your device","slug":"configure-your-device","link":"#configure-your-device","children":[]}]}],"relativePath":"guides/getting-started/introduction.md"}'),_={name:"guides/getting-started/introduction.md"},b=l('<h1 id="welcome-to-the-alis-build-platform" tabindex="-1">Welcome to the Alis Build platform <a class="header-anchor" href="#welcome-to-the-alis-build-platform" aria-hidden="true">#</a></h1><blockquote><p><strong><em>&quot;Our job as builders is to create the world as it could be.&quot;</em></strong> - <a href="https://farmerandfarmer.org/mastery/builder.html" target="_blank">Sep Kamvar</a></p></blockquote><p>The Alis Build platform enables individuals and organisations to transform ideas into scalable, enterprise-grade digital services.</p><p>High-quality software needs to be scalable, readily accessible, secure, easy-to-use and interoperable with other digital services. The costs and expertise associated with these requirements are exacting, particularly at scale, which present high barriers to entry for individuals and organisations.</p><p>The technologies and standards already exist to lower these barriers, but they are disjointed and require a lot of effort to consolidate and effectively leverage before the value is realised. We have done the work of thinking through these complex problems, identifying the best-in-class open-source technologies and standards, and brought these together for the users of the platform.</p><p>Our aim is to democratise building software, enabling anyone to build their own innovation through the simple steps of <em>define, implement and consume</em>.</p><h2 id="experience-it-yourself" tabindex="-1">Experience it yourself <a class="header-anchor" href="#experience-it-yourself" aria-hidden="true">#</a></h2><p>Experience the simplicity of <em>define, implement and consume</em> that is Alis Build enables by following the example.</p><p>This example is derived from the <a href="https://grpc.io/docs/languages/go/quickstart/" target="_blank" rel="noreferrer">gRPC quickstart documentation</a>.</p><h3 id="before-you-start" tabindex="-1">Before you start <a class="header-anchor" href="#before-you-start" aria-hidden="true">#</a></h3><ol><li>Ensure that you have installed the <a href="./command-line-interface.html">Alis CLI</a></li><li>From your terminal, create a new directory and navigate to it</li></ol>',11),v=e("div",{class:"language-bash"},[e("button",{class:"copy"}),e("span",{class:"lang"},"bash"),e("pre",null,[e("code",null,[e("span",{class:"token function"},"mkdir"),n(` helloworld
`),e("span",{class:"token builtin class-name"},"cd"),n(` helloworld
`)])])],-1),y=e("div",{class:"language-bash"},[e("button",{class:"copy"}),e("span",{class:"lang"},"bash"),e("pre",null,[e("code",null,[n(`md helloworld
`),e("span",{class:"token builtin class-name"},"cd"),n(` helloworld
`)])])],-1),w=l(`<h2 id="_1-define" tabindex="-1">1. Define <a class="header-anchor" href="#_1-define" aria-hidden="true">#</a></h2><p>In the <em>define</em> step, we use <a href="./../references/resource-oriented-design.html#protocol-buffers">Protocol Buffers</a> to define all resources and services that we use.</p><p>From your terminal, run the command:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code>alis proto init helloworld.v1
</code></pre></div><p>The response should be similar to that shown below. <img src="`+u+`" alt=""></p><p>The above command added a <code>service.proto</code> file in the <code>helloworld</code> directory. Edit this file to contain the content shown below.</p><div class="language-protobuf"><button class="copy"></button><span class="lang">protobuf</span><pre><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> helloworld<span class="token punctuation">.</span>v1<span class="token punctuation">;</span>

<span class="token keyword">option</span> go_package <span class="token operator">=</span> <span class="token string">&quot;google.golang.org/grpc/examples/helloworld/helloworld/v1&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// The greeting service definition.</span>
<span class="token keyword">service</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>
  <span class="token comment">// Sends a greeting</span>
  <span class="token keyword">rpc</span> <span class="token function">SayHello</span> <span class="token punctuation">(</span><span class="token class-name">HelloRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">HelloReply</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// The request message containing the user&#39;s name.</span>
<span class="token keyword">message</span> <span class="token class-name">HelloRequest</span> <span class="token punctuation">{</span>
  <span class="token comment">// The name of the user</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// The response message containing the greetings</span>
<span class="token keyword">message</span> <span class="token class-name">HelloReply</span> <span class="token punctuation">{</span>
  <span class="token comment">// The greeting message</span>
  <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Now that everything is defined, we can implement the service.</p><h2 id="_2-implement" tabindex="-1">2. Implement <a class="header-anchor" href="#_2-implement" aria-hidden="true">#</a></h2><p>Having a well-defined source of truth in the form of the proto file, allows for the auto-generation of language-specific type definitions and scaffolding for adding business logic, amongst other benefits. These features make it simple for developers to only focus on adding business logic.</p><p>We will leverage these to implement the <code>Greeter</code> service by running the following command and selecting one or more of auto-generated options provided.</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code>alis proto gen boilerplate
</code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The above command requires you to be in a directory containing a single proto file, ie. the <code>helloworld</code> directory containing the <code>service.proto</code> file.</p></div><p>The flow should be similar to that depicted below, in which only <code>Go</code> was selected. <img src="`+d+'" alt=""></p><p>This commands adds a set of <code>server</code> and <code>client</code> boilerplate files in the <code>helloworld</code> directory, under the selected languages that contains boilerplate code such as to only add the business logic.</p><p>To implement the logic, open the desired language directory in your IDE and follow the steps below.</p>',16),x=e("ol",null,[e("li",null,[e("p",null,[n("Ensure that you have executed "),e("code",null,"go mod tidy"),n(" in the "),e("code",null,"server"),n(" directory")])]),e("li",null,[e("p",null,[n("Open the "),e("code",null,"server/methods.go"),n(" file and fill in the logic as follows:")])])],-1),T=e("p",null,[e("img",{src:h,alt:""})],-1),C=e("details",{class:"details custom-block"},[e("summary",null,"Complete file"),e("div",{class:"language-go"},[e("button",{class:"copy"}),e("span",{class:"lang"},"go"),e("pre",null,[e("code",null,[n("	"),e("span",{class:"token keyword"},"package"),n(` main

	`),e("span",{class:"token keyword"},"import"),n(),e("span",{class:"token punctuation"},"("),n(`
		`),e("span",{class:"token string"},'"context"'),n(`

		pb `),e("span",{class:"token string"},'"helloworld.v1/internal/protobufs"'),n(`
	`),e("span",{class:"token punctuation"},")"),n(`

	`),e("span",{class:"token keyword"},"type"),n(" myGreeter "),e("span",{class:"token keyword"},"struct"),n(),e("span",{class:"token punctuation"},"{"),n(`
		pb`),e("span",{class:"token punctuation"},"."),n(`UnimplementedGreeterServer
	`),e("span",{class:"token punctuation"},"}"),n(`

	`),e("span",{class:"token keyword"},"func"),n(),e("span",{class:"token punctuation"},"("),n("s "),e("span",{class:"token operator"},"*"),n("myGreeter"),e("span",{class:"token punctuation"},")"),n(),e("span",{class:"token function"},"SayHello"),e("span",{class:"token punctuation"},"("),n("ctx context"),e("span",{class:"token punctuation"},"."),n("Context"),e("span",{class:"token punctuation"},","),n(" req "),e("span",{class:"token operator"},"*"),n("pb"),e("span",{class:"token punctuation"},"."),n("HelloRequest"),e("span",{class:"token punctuation"},")"),n(),e("span",{class:"token punctuation"},"("),e("span",{class:"token operator"},"*"),n("pb"),e("span",{class:"token punctuation"},"."),n("HelloReply"),e("span",{class:"token punctuation"},","),n(),e("span",{class:"token builtin"},"error"),e("span",{class:"token punctuation"},")"),n(),e("span",{class:"token punctuation"},"{"),n(`
		msg `),e("span",{class:"token operator"},":="),n(),e("span",{class:"token string"},'"Hello, "'),n(),e("span",{class:"token operator"},"+"),n(" req"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"GetName"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),n(`

		`),e("span",{class:"token keyword"},"return"),n(),e("span",{class:"token operator"},"&"),n("pb"),e("span",{class:"token punctuation"},"."),n("HelloReply"),e("span",{class:"token punctuation"},"{"),n("Message"),e("span",{class:"token punctuation"},":"),n(" msg"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),n(),e("span",{class:"token boolean"},"nil"),n(`
	`),e("span",{class:"token punctuation"},"}"),n(`

`)])])])],-1),S=l('<p>Notice how the definitions from the <code>service.proto</code> file travels with the code. This greatly boosts developer productivity as:</p><ol><li>The <em>define</em> step, which contains the documentation, is not an afterthought but is integral to the development process.</li><li>These definitions are shipped with the code, providing developers with the types and documentation they require in their IDE.</li></ol><p>Both these factors contribute to enforcing good development practices and greatly improves developer and business productivity.</p><h2 id="_3-consume" tabindex="-1">3. Consume <a class="header-anchor" href="#_3-consume" aria-hidden="true">#</a></h2><p>Similar to the server, Alis Build also auto-generates type definitions for the supported languages, making consumption of services feel native.</p><p>Add simple logic in your language of choice to consume the <code>greeter</code> service.</p>',6),A=e("ol",null,[e("li",null,[e("p",null,[n("Ensure that you have executed "),e("code",null,"go mod tidy"),n(" in the "),e("code",null,"client"),n(" directory")])]),e("li",null,[e("p",null,[n("Open the "),e("code",null,"client/main.go"),n(" file and fill in the logic as follows:")])])],-1),q=e("p",null,[e("img",{src:m,alt:""})],-1),B=e("details",{class:"details custom-block"},[e("summary",null,"Complete file"),e("div",{class:"language-go"},[e("button",{class:"copy"}),e("span",{class:"lang"},"go"),e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"package"),n(` main

`),e("span",{class:"token keyword"},"import"),n(),e("span",{class:"token punctuation"},"("),n(`
	`),e("span",{class:"token string"},'"context"'),n(`
	`),e("span",{class:"token string"},'"fmt"'),n(`
	`),e("span",{class:"token string"},'"log"'),n(`

	pb `),e("span",{class:"token string"},'"client/internal/protobufs"'),n(`
	`),e("span",{class:"token string"},'"google.golang.org/grpc"'),n(`
`),e("span",{class:"token punctuation"},")"),n(`

`),e("span",{class:"token keyword"},"func"),n(),e("span",{class:"token function"},"main"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),n(),e("span",{class:"token punctuation"},"{"),n(`
	conn`),e("span",{class:"token punctuation"},","),n(" err "),e("span",{class:"token operator"},":="),n(" grpc"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"Dial"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},'"localhost:8080"'),e("span",{class:"token punctuation"},","),n(" grpc"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"WithInsecure"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),n(`
	`),e("span",{class:"token keyword"},"if"),n(" err "),e("span",{class:"token operator"},"!="),n(),e("span",{class:"token boolean"},"nil"),n(),e("span",{class:"token punctuation"},"{"),n(`
		log`),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"Fatal"),e("span",{class:"token punctuation"},"("),n("err"),e("span",{class:"token punctuation"},")"),n(`
	`),e("span",{class:"token punctuation"},"}"),n(`
	`),e("span",{class:"token keyword"},"defer"),n(" conn"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"Close"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),n(`

	GreeterClient `),e("span",{class:"token operator"},":="),n(" pb"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"NewGreeterClient"),e("span",{class:"token punctuation"},"("),n("conn"),e("span",{class:"token punctuation"},")"),n(`
	resp`),e("span",{class:"token punctuation"},","),n(),e("span",{class:"token boolean"},"_"),n(),e("span",{class:"token operator"},":="),n(" GreeterClient"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"SayHello"),e("span",{class:"token punctuation"},"("),n("context"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"Background"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},","),n(),e("span",{class:"token operator"},"&"),n("pb"),e("span",{class:"token punctuation"},"."),n("HelloRequest"),e("span",{class:"token punctuation"},"{"),n("Name"),e("span",{class:"token punctuation"},":"),n(),e("span",{class:"token string"},'"Bob"'),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},")"),n(`

	fmt`),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"Println"),e("span",{class:"token punctuation"},"("),n("resp"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"GetMessage"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),n(`

`),e("span",{class:"token punctuation"},"}"),n(`

`)])])])],-1),N=e("h2",{id:"test-it-out",tabindex:"-1"},[n("Test it out "),e("a",{class:"header-anchor",href:"#test-it-out","aria-hidden":"true"},"#")],-1),E=e("p",null,[n("Now that we have "),e("em",null,"defined"),n(" our service; "),e("em",null,"implemented"),n(" the logic; and added code for the "),e("em",null,"consumption"),n(", we can now spin up the server and make a hit from the client to see this in action.")],-1),G=e("h3",{id:"start-the-server",tabindex:"-1"},[n("Start the server "),e("a",{class:"header-anchor",href:"#start-the-server","aria-hidden":"true"},"#")],-1),I=e("ol",null,[e("li",null,[n("Open the terminal in the "),e("code",null,"helloworld/go/server"),n(" directory")]),e("li",null,[n("Run the command "),e("code",null,"go run *.go"),n(", which should give a response similar to that below.")])],-1),R=e("p",null,[e("img",{src:g,alt:""})],-1),H=e("h3",{id:"consume-the-service",tabindex:"-1"},[n("Consume the service "),e("a",{class:"header-anchor",href:"#consume-the-service","aria-hidden":"true"},"#")],-1),D=e("ol",null,[e("li",null,[n("Open the terminal in the "),e("code",null,"helloworld/go/client"),n(" directory")]),e("li",null,[n("Run the command "),e("code",null,"go run *.go"),n(", which should give a response similar to that below.")])],-1),P=e("p",null,[e("img",{src:k,alt:""})],-1),V=l(`<h2 id="support-for-additional-languages" tabindex="-1">Support for additional languages <a class="header-anchor" href="#support-for-additional-languages" aria-hidden="true">#</a></h2><p>We are constantly working on expanding the auto-generated functionality such as demonstrated above.</p><p>While we may not have full code boilerplate generation support for all available languages, you are still able to generate type definitions for a wider range of languages.</p><h3 id="test-it-out-1" tabindex="-1">Test it out <a class="header-anchor" href="#test-it-out-1" aria-hidden="true">#</a></h3><p>In your terminal, run the following command to generate the types:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code>alis proto gen types
</code></pre></div><p>The flow should be similar to that below.</p><p><img src="`+f+'" alt=""></p><p>These can now be imported in your codebase to leverage the power of the definition-first approach.</p><h2 id="want-to-see-more" tabindex="-1">Want to see more? <a class="header-anchor" href="#want-to-see-more" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">Note</p><p>The rest of the documentation is primarily geared towards <a href="https://alisx.com/#:~:text=Enterprise" target="_blank" rel="noreferrer">Alis Build Enterprise</a>, which gives the simple process of define, implement and consume superpowers by providing a complete cloud development framework for teams and organisations.</p></div><h3 id="design-and-implement-digital-services" tabindex="-1">Design and implement digital services <a class="header-anchor" href="#design-and-implement-digital-services" aria-hidden="true">#</a></h3><p>The Alis Build platform gives you and your organisation software development superpowers. <a href="./developer-flow.html">Experience what we make possible</a>.</p><h3 id="consume-digital-services" tabindex="-1">Consume digital services <a class="header-anchor" href="#consume-digital-services" aria-hidden="true">#</a></h3><p>We aim to ensure that how software across the platform operates, communicates and integrates is simple and consistent. <a href="./consumer-experience.html">Find out more and experience it yourself</a>.</p><h3 id="configure-your-device" tabindex="-1">Configure your device <a class="header-anchor" href="#configure-your-device" aria-hidden="true">#</a></h3><p>Already joined Alis Build? Follow the guides to set up your local environment, starting off with our <a href="./command-line-interface.html">command line interface</a>.</p><h4 id="get-in-touch" tabindex="-1">Get in touch <a class="header-anchor" href="#get-in-touch" aria-hidden="true">#</a></h4><p>Have any further questions? Or want to schedule a demo? <a href="https://alis.exchange/signup" target="_blank">Get in touch</a>.</p>',19);function W(O,F,$,j,M,L){const a=i("tab"),o=i("tabs");return r(),p("div",null,[b,t(o,null,{default:s(()=>[t(a,{name:"MacOS/Linux"},{default:s(()=>[v]),_:1}),t(a,{name:"Windows"},{default:s(()=>[y]),_:1})]),_:1}),w,t(o,null,{default:s(()=>[t(a,{name:"Go"},{default:s(()=>[x,T,C]),_:1})]),_:1}),S,t(o,null,{default:s(()=>[t(a,{name:"Go"},{default:s(()=>[A,q,B]),_:1})]),_:1}),N,E,t(o,null,{default:s(()=>[t(a,{name:"Go"},{default:s(()=>[G,I,R,H,D,P]),_:1})]),_:1}),V])}const K=c(_,[["render",W]]);export{J as __pageData,K as default};
